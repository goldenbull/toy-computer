//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from toy_asm.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="toy_asmParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface Itoy_asmListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] toy_asmParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] toy_asmParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.opWithLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpWithLabel([NotNull] toy_asmParser.OpWithLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.opWithLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpWithLabel([NotNull] toy_asmParser.OpWithLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.opLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpLabel([NotNull] toy_asmParser.OpLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.opLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpLabel([NotNull] toy_asmParser.OpLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOp([NotNull] toy_asmParser.OpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOp([NotNull] toy_asmParser.OpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] toy_asmParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] toy_asmParser.NumContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.reg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReg([NotNull] toy_asmParser.RegContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.reg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReg([NotNull] toy_asmParser.RegContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.offset"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOffset([NotNull] toy_asmParser.OffsetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.offset"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOffset([NotNull] toy_asmParser.OffsetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.mem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMem([NotNull] toy_asmParser.MemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.mem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMem([NotNull] toy_asmParser.MemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.move"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMove([NotNull] toy_asmParser.MoveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.move"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMove([NotNull] toy_asmParser.MoveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.add"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdd([NotNull] toy_asmParser.AddContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.add"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdd([NotNull] toy_asmParser.AddContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSub([NotNull] toy_asmParser.SubContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSub([NotNull] toy_asmParser.SubContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.mul"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMul([NotNull] toy_asmParser.MulContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.mul"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMul([NotNull] toy_asmParser.MulContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.div"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDiv([NotNull] toy_asmParser.DivContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.div"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDiv([NotNull] toy_asmParser.DivContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.cmp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCmp([NotNull] toy_asmParser.CmpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.cmp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCmp([NotNull] toy_asmParser.CmpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.jump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJump([NotNull] toy_asmParser.JumpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.jump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJump([NotNull] toy_asmParser.JumpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] toy_asmParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] toy_asmParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.ret"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRet([NotNull] toy_asmParser.RetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.ret"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRet([NotNull] toy_asmParser.RetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.push_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPush_op([NotNull] toy_asmParser.Push_opContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.push_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPush_op([NotNull] toy_asmParser.Push_opContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.pop_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPop_op([NotNull] toy_asmParser.Pop_opContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.pop_op"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPop_op([NotNull] toy_asmParser.Pop_opContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInput([NotNull] toy_asmParser.InputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInput([NotNull] toy_asmParser.InputContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint([NotNull] toy_asmParser.PrintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint([NotNull] toy_asmParser.PrintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.rand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRand([NotNull] toy_asmParser.RandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.rand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRand([NotNull] toy_asmParser.RandContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.dump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDump([NotNull] toy_asmParser.DumpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.dump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDump([NotNull] toy_asmParser.DumpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.pause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPause([NotNull] toy_asmParser.PauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.pause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPause([NotNull] toy_asmParser.PauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.halt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHalt([NotNull] toy_asmParser.HaltContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.halt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHalt([NotNull] toy_asmParser.HaltContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="toy_asmParser.nop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNop([NotNull] toy_asmParser.NopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="toy_asmParser.nop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNop([NotNull] toy_asmParser.NopContext context);
}
