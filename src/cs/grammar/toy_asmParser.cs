//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from toy_asm.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class toy_asmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, Comment=41, INT=42, Label=43, STR=44, WS=45;
	public const int
		RULE_program = 0, RULE_opWithLabel = 1, RULE_opLabel = 2, RULE_op = 3, 
		RULE_num = 4, RULE_reg = 5, RULE_offset = 6, RULE_mem = 7, RULE_str = 8, 
		RULE_move = 9, RULE_add = 10, RULE_sub = 11, RULE_mul = 12, RULE_div = 13, 
		RULE_cmp = 14, RULE_jump = 15, RULE_call = 16, RULE_ret = 17, RULE_push_op = 18, 
		RULE_pop_op = 19, RULE_input = 20, RULE_print = 21, RULE_rand = 22, RULE_dump = 23, 
		RULE_halt = 24, RULE_nop = 25;
	public static readonly string[] ruleNames = {
		"program", "opWithLabel", "opLabel", "op", "num", "reg", "offset", "mem", 
		"str", "move", "add", "sub", "mul", "div", "cmp", "jump", "call", "ret", 
		"push_op", "pop_op", "input", "print", "rand", "dump", "halt", "nop"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'+'", "'-'", "'ax'", "'bx'", "'cx'", "'dx'", "'bp'", "'sp'", 
		"'['", "']'", "'mov'", "','", "'add'", "'sub'", "'mul'", "'div'", "'cmp'", 
		"'jmp'", "'je'", "'jne'", "'jg'", "'jge'", "'jl'", "'jle'", "'call'", 
		"'ret'", "'push'", "'pushf'", "'pusha'", "'pop'", "'popf'", "'popa'", 
		"'input'", "'print'", "'println'", "'rand'", "'dump'", "'halt'", "'nop'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "Comment", "INT", "Label", "STR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "toy_asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static toy_asmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public toy_asmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public toy_asmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(toy_asmParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(toy_asmParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(toy_asmParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpWithLabelContext[] opWithLabel() {
			return GetRuleContexts<OpWithLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpWithLabelContext opWithLabel(int i) {
			return GetRuleContext<OpWithLabelContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comment:
					{
					State = 52;
					Match(Comment);
					}
					break;
				case T__11:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case T__39:
				case Label:
					{
					State = 53;
					opWithLabel();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 13194139521024L) != 0) );
			State = 58;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpWithLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpLabelContext opLabel() {
			return GetRuleContext<OpLabelContext>(0);
		}
		public OpWithLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opWithLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterOpWithLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitOpWithLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpWithLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpWithLabelContext opWithLabel() {
		OpWithLabelContext _localctx = new OpWithLabelContext(Context, State);
		EnterRule(_localctx, 2, RULE_opWithLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Label) {
				{
				State = 60;
				opLabel();
				}
			}

			State = 63;
			op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Label() { return GetToken(toy_asmParser.Label, 0); }
		public OpLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterOpLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitOpLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpLabelContext opLabel() {
		OpLabelContext _localctx = new OpLabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_opLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(Label);
			State = 66;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul() {
			return GetRuleContext<MulContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivContext div() {
			return GetRuleContext<DivContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpContext cmp() {
			return GetRuleContext<CmpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetContext ret() {
			return GetRuleContext<RetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Push_opContext push_op() {
			return GetRuleContext<Push_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_opContext pop_op() {
			return GetRuleContext<Pop_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandContext rand() {
			return GetRuleContext<RandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DumpContext dump() {
			return GetRuleContext<DumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HaltContext halt() {
			return GetRuleContext<HaltContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NopContext nop() {
			return GetRuleContext<NopContext>(0);
		}
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 6, RULE_op);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				move();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				add();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70;
				sub();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 71;
				mul();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 72;
				div();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73;
				cmp();
				}
				break;
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74;
				jump();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 8);
				{
				State = 75;
				call();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 9);
				{
				State = 76;
				ret();
				}
				break;
			case T__27:
			case T__28:
			case T__29:
				EnterOuterAlt(_localctx, 10);
				{
				State = 77;
				push_op();
				}
				break;
			case T__30:
			case T__31:
			case T__32:
				EnterOuterAlt(_localctx, 11);
				{
				State = 78;
				pop_op();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 12);
				{
				State = 79;
				input();
				}
				break;
			case T__34:
			case T__35:
				EnterOuterAlt(_localctx, 13);
				{
				State = 80;
				print();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 14);
				{
				State = 81;
				rand();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 15);
				{
				State = 82;
				dump();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 16);
				{
				State = 83;
				halt();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 17);
				{
				State = 84;
				nop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(toy_asmParser.INT, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 8, RULE_num);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 87;
					Match(T__1);
					}
				}

				State = 90;
				Match(INT);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(T__2);
				State = 92;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegContext : ParserRuleContext {
		public RegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterReg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitReg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegContext reg() {
		RegContext _localctx = new RegContext(Context, State);
		EnterRule(_localctx, 10, RULE_reg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(toy_asmParser.INT, 0); }
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 12, RULE_offset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 98;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffsetContext offset() {
			return GetRuleContext<OffsetContext>(0);
		}
		public MemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterMem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitMem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemContext mem() {
		MemContext _localctx = new MemContext(Context, State);
		EnterRule(_localctx, 14, RULE_mem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__9);
			State = 101;
			reg();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__2) {
				{
				State = 102;
				offset();
				}
			}

			State = 105;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(toy_asmParser.STR, 0); }
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 16, RULE_str);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 18, RULE_move);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(T__11);
				State = 110;
				reg();
				State = 111;
				Match(T__12);
				State = 112;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(T__11);
				State = 115;
				reg();
				State = 116;
				Match(T__12);
				State = 117;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(T__11);
				State = 120;
				reg();
				State = 121;
				Match(T__12);
				State = 122;
				mem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				Match(T__11);
				State = 125;
				mem();
				State = 126;
				Match(T__12);
				State = 127;
				num();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129;
				Match(T__11);
				State = 130;
				mem();
				State = 131;
				Match(T__12);
				State = 132;
				reg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 20, RULE_add);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(T__13);
				State = 137;
				reg();
				State = 138;
				Match(T__12);
				State = 139;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				Match(T__13);
				State = 142;
				reg();
				State = 143;
				Match(T__12);
				State = 144;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				Match(T__13);
				State = 147;
				reg();
				State = 148;
				Match(T__12);
				State = 149;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 22, RULE_sub);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				Match(T__14);
				State = 154;
				reg();
				State = 155;
				Match(T__12);
				State = 156;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(T__14);
				State = 159;
				reg();
				State = 160;
				Match(T__12);
				State = 161;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163;
				Match(T__14);
				State = 164;
				reg();
				State = 165;
				Match(T__12);
				State = 166;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public MulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulContext mul() {
		MulContext _localctx = new MulContext(Context, State);
		EnterRule(_localctx, 24, RULE_mul);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				Match(T__15);
				State = 171;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				Match(T__15);
				State = 173;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				Match(T__15);
				State = 175;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public DivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivContext div() {
		DivContext _localctx = new DivContext(Context, State);
		EnterRule(_localctx, 26, RULE_div);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(T__16);
				State = 179;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(T__16);
				State = 181;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				Match(T__16);
				State = 183;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public CmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpContext cmp() {
		CmpContext _localctx = new CmpContext(Context, State);
		EnterRule(_localctx, 28, RULE_cmp);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				Match(T__17);
				State = 187;
				reg();
				State = 188;
				Match(T__12);
				State = 189;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				Match(T__17);
				State = 192;
				reg();
				State = 193;
				Match(T__12);
				State = 194;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				Match(T__17);
				State = 197;
				reg();
				State = 198;
				Match(T__12);
				State = 199;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Label() { return GetToken(toy_asmParser.Label, 0); }
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 30, RULE_jump);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				Match(T__18);
				State = 204;
				Match(Label);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				Match(T__19);
				State = 206;
				Match(Label);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207;
				Match(T__20);
				State = 208;
				Match(Label);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209;
				Match(T__21);
				State = 210;
				Match(Label);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 5);
				{
				State = 211;
				Match(T__22);
				State = 212;
				Match(Label);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 213;
				Match(T__23);
				State = 214;
				Match(Label);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 7);
				{
				State = 215;
				Match(T__24);
				State = 216;
				Match(Label);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Label() { return GetToken(toy_asmParser.Label, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(T__25);
			State = 220;
			Match(Label);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetContext : ParserRuleContext {
		public RetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetContext ret() {
		RetContext _localctx = new RetContext(Context, State);
		EnterRule(_localctx, 34, RULE_ret);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Push_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		public Push_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterPush_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitPush_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Push_opContext push_op() {
		Push_opContext _localctx = new Push_opContext(Context, State);
		EnterRule(_localctx, 36, RULE_push_op);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(T__27);
				State = 225;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				Match(T__27);
				State = 227;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				Match(T__28);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229;
				Match(T__29);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		public Pop_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterPop_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitPop_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPop_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pop_opContext pop_op() {
		Pop_opContext _localctx = new Pop_opContext(Context, State);
		EnterRule(_localctx, 38, RULE_pop_op);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				Match(T__30);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				Match(T__30);
				State = 234;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				Match(T__31);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				Match(T__32);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 40, RULE_input);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(T__33);
				State = 240;
				reg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(T__33);
				State = 242;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 42, RULE_print);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245;
				Match(T__34);
				State = 246;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(T__34);
				State = 248;
				reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249;
				Match(T__34);
				State = 250;
				mem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 251;
				Match(T__34);
				State = 252;
				str();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 253;
				Match(T__35);
				State = 254;
				num();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 255;
				Match(T__35);
				State = 256;
				reg();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 257;
				Match(T__35);
				State = 258;
				mem();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 259;
				Match(T__35);
				State = 260;
				str();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 261;
				Match(T__35);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemContext mem() {
			return GetRuleContext<MemContext>(0);
		}
		public RandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterRand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitRand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandContext rand() {
		RandContext _localctx = new RandContext(Context, State);
		EnterRule(_localctx, 44, RULE_rand);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				Match(T__36);
				State = 265;
				reg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(T__36);
				State = 267;
				mem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(toy_asmParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public DumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterDump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitDump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DumpContext dump() {
		DumpContext _localctx = new DumpContext(Context, State);
		EnterRule(_localctx, 46, RULE_dump);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				Match(T__37);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(T__37);
				State = 272;
				reg();
				State = 273;
				Match(T__12);
				State = 274;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				Match(T__37);
				State = 277;
				num();
				State = 278;
				Match(T__12);
				State = 279;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HaltContext : ParserRuleContext {
		public HaltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterHalt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitHalt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HaltContext halt() {
		HaltContext _localctx = new HaltContext(Context, State);
		EnterRule(_localctx, 48, RULE_halt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NopContext : ParserRuleContext {
		public NopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.EnterNop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Itoy_asmListener typedListener = listener as Itoy_asmListener;
			if (typedListener != null) typedListener.ExitNop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itoy_asmVisitor<TResult> typedVisitor = visitor as Itoy_asmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NopContext nop() {
		NopContext _localctx = new NopContext(Context, State);
		EnterRule(_localctx, 50, RULE_nop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,288,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,4,0,55,8,0,11,0,12,0,56,
		1,0,1,0,1,1,3,1,62,8,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,86,8,3,1,4,3,4,89,8,4,1,4,
		1,4,1,4,3,4,94,8,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,104,8,7,1,7,1,7,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,135,8,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,152,8,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,3,11,169,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,177,8,12,1,13,1,13,
		1,13,1,13,1,13,1,13,3,13,185,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,202,8,14,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,218,8,15,1,16,1,
		16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,231,8,18,1,19,1,19,
		1,19,1,19,1,19,3,19,238,8,19,1,20,1,20,1,20,1,20,3,20,244,8,20,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,3,21,263,8,21,1,22,1,22,1,22,1,22,3,22,269,8,22,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,282,8,23,1,24,1,24,1,25,1,
		25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,0,2,1,0,4,9,1,0,2,3,321,0,54,1,0,0,0,2,61,1,0,0,0,4,
		65,1,0,0,0,6,85,1,0,0,0,8,93,1,0,0,0,10,95,1,0,0,0,12,97,1,0,0,0,14,100,
		1,0,0,0,16,107,1,0,0,0,18,134,1,0,0,0,20,151,1,0,0,0,22,168,1,0,0,0,24,
		176,1,0,0,0,26,184,1,0,0,0,28,201,1,0,0,0,30,217,1,0,0,0,32,219,1,0,0,
		0,34,222,1,0,0,0,36,230,1,0,0,0,38,237,1,0,0,0,40,243,1,0,0,0,42,262,1,
		0,0,0,44,268,1,0,0,0,46,281,1,0,0,0,48,283,1,0,0,0,50,285,1,0,0,0,52,55,
		5,41,0,0,53,55,3,2,1,0,54,52,1,0,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,
		1,0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,59,5,0,0,1,59,1,1,0,0,0,60,62,3,
		4,2,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,3,6,3,0,64,3,1,0,
		0,0,65,66,5,43,0,0,66,67,5,1,0,0,67,5,1,0,0,0,68,86,3,18,9,0,69,86,3,20,
		10,0,70,86,3,22,11,0,71,86,3,24,12,0,72,86,3,26,13,0,73,86,3,28,14,0,74,
		86,3,30,15,0,75,86,3,32,16,0,76,86,3,34,17,0,77,86,3,36,18,0,78,86,3,38,
		19,0,79,86,3,40,20,0,80,86,3,42,21,0,81,86,3,44,22,0,82,86,3,46,23,0,83,
		86,3,48,24,0,84,86,3,50,25,0,85,68,1,0,0,0,85,69,1,0,0,0,85,70,1,0,0,0,
		85,71,1,0,0,0,85,72,1,0,0,0,85,73,1,0,0,0,85,74,1,0,0,0,85,75,1,0,0,0,
		85,76,1,0,0,0,85,77,1,0,0,0,85,78,1,0,0,0,85,79,1,0,0,0,85,80,1,0,0,0,
		85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,7,1,0,0,0,87,
		89,5,2,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,94,5,42,0,0,91,
		92,5,3,0,0,92,94,5,42,0,0,93,88,1,0,0,0,93,91,1,0,0,0,94,9,1,0,0,0,95,
		96,7,0,0,0,96,11,1,0,0,0,97,98,7,1,0,0,98,99,5,42,0,0,99,13,1,0,0,0,100,
		101,5,10,0,0,101,103,3,10,5,0,102,104,3,12,6,0,103,102,1,0,0,0,103,104,
		1,0,0,0,104,105,1,0,0,0,105,106,5,11,0,0,106,15,1,0,0,0,107,108,5,44,0,
		0,108,17,1,0,0,0,109,110,5,12,0,0,110,111,3,10,5,0,111,112,5,13,0,0,112,
		113,3,8,4,0,113,135,1,0,0,0,114,115,5,12,0,0,115,116,3,10,5,0,116,117,
		5,13,0,0,117,118,3,10,5,0,118,135,1,0,0,0,119,120,5,12,0,0,120,121,3,10,
		5,0,121,122,5,13,0,0,122,123,3,14,7,0,123,135,1,0,0,0,124,125,5,12,0,0,
		125,126,3,14,7,0,126,127,5,13,0,0,127,128,3,8,4,0,128,135,1,0,0,0,129,
		130,5,12,0,0,130,131,3,14,7,0,131,132,5,13,0,0,132,133,3,10,5,0,133,135,
		1,0,0,0,134,109,1,0,0,0,134,114,1,0,0,0,134,119,1,0,0,0,134,124,1,0,0,
		0,134,129,1,0,0,0,135,19,1,0,0,0,136,137,5,14,0,0,137,138,3,10,5,0,138,
		139,5,13,0,0,139,140,3,8,4,0,140,152,1,0,0,0,141,142,5,14,0,0,142,143,
		3,10,5,0,143,144,5,13,0,0,144,145,3,10,5,0,145,152,1,0,0,0,146,147,5,14,
		0,0,147,148,3,10,5,0,148,149,5,13,0,0,149,150,3,14,7,0,150,152,1,0,0,0,
		151,136,1,0,0,0,151,141,1,0,0,0,151,146,1,0,0,0,152,21,1,0,0,0,153,154,
		5,15,0,0,154,155,3,10,5,0,155,156,5,13,0,0,156,157,3,8,4,0,157,169,1,0,
		0,0,158,159,5,15,0,0,159,160,3,10,5,0,160,161,5,13,0,0,161,162,3,10,5,
		0,162,169,1,0,0,0,163,164,5,15,0,0,164,165,3,10,5,0,165,166,5,13,0,0,166,
		167,3,14,7,0,167,169,1,0,0,0,168,153,1,0,0,0,168,158,1,0,0,0,168,163,1,
		0,0,0,169,23,1,0,0,0,170,171,5,16,0,0,171,177,3,8,4,0,172,173,5,16,0,0,
		173,177,3,10,5,0,174,175,5,16,0,0,175,177,3,14,7,0,176,170,1,0,0,0,176,
		172,1,0,0,0,176,174,1,0,0,0,177,25,1,0,0,0,178,179,5,17,0,0,179,185,3,
		8,4,0,180,181,5,17,0,0,181,185,3,10,5,0,182,183,5,17,0,0,183,185,3,14,
		7,0,184,178,1,0,0,0,184,180,1,0,0,0,184,182,1,0,0,0,185,27,1,0,0,0,186,
		187,5,18,0,0,187,188,3,10,5,0,188,189,5,13,0,0,189,190,3,8,4,0,190,202,
		1,0,0,0,191,192,5,18,0,0,192,193,3,10,5,0,193,194,5,13,0,0,194,195,3,10,
		5,0,195,202,1,0,0,0,196,197,5,18,0,0,197,198,3,10,5,0,198,199,5,13,0,0,
		199,200,3,14,7,0,200,202,1,0,0,0,201,186,1,0,0,0,201,191,1,0,0,0,201,196,
		1,0,0,0,202,29,1,0,0,0,203,204,5,19,0,0,204,218,5,43,0,0,205,206,5,20,
		0,0,206,218,5,43,0,0,207,208,5,21,0,0,208,218,5,43,0,0,209,210,5,22,0,
		0,210,218,5,43,0,0,211,212,5,23,0,0,212,218,5,43,0,0,213,214,5,24,0,0,
		214,218,5,43,0,0,215,216,5,25,0,0,216,218,5,43,0,0,217,203,1,0,0,0,217,
		205,1,0,0,0,217,207,1,0,0,0,217,209,1,0,0,0,217,211,1,0,0,0,217,213,1,
		0,0,0,217,215,1,0,0,0,218,31,1,0,0,0,219,220,5,26,0,0,220,221,5,43,0,0,
		221,33,1,0,0,0,222,223,5,27,0,0,223,35,1,0,0,0,224,225,5,28,0,0,225,231,
		3,8,4,0,226,227,5,28,0,0,227,231,3,10,5,0,228,231,5,29,0,0,229,231,5,30,
		0,0,230,224,1,0,0,0,230,226,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,
		37,1,0,0,0,232,238,5,31,0,0,233,234,5,31,0,0,234,238,3,10,5,0,235,238,
		5,32,0,0,236,238,5,33,0,0,237,232,1,0,0,0,237,233,1,0,0,0,237,235,1,0,
		0,0,237,236,1,0,0,0,238,39,1,0,0,0,239,240,5,34,0,0,240,244,3,10,5,0,241,
		242,5,34,0,0,242,244,3,14,7,0,243,239,1,0,0,0,243,241,1,0,0,0,244,41,1,
		0,0,0,245,246,5,35,0,0,246,263,3,8,4,0,247,248,5,35,0,0,248,263,3,10,5,
		0,249,250,5,35,0,0,250,263,3,14,7,0,251,252,5,35,0,0,252,263,3,16,8,0,
		253,254,5,36,0,0,254,263,3,8,4,0,255,256,5,36,0,0,256,263,3,10,5,0,257,
		258,5,36,0,0,258,263,3,14,7,0,259,260,5,36,0,0,260,263,3,16,8,0,261,263,
		5,36,0,0,262,245,1,0,0,0,262,247,1,0,0,0,262,249,1,0,0,0,262,251,1,0,0,
		0,262,253,1,0,0,0,262,255,1,0,0,0,262,257,1,0,0,0,262,259,1,0,0,0,262,
		261,1,0,0,0,263,43,1,0,0,0,264,265,5,37,0,0,265,269,3,10,5,0,266,267,5,
		37,0,0,267,269,3,14,7,0,268,264,1,0,0,0,268,266,1,0,0,0,269,45,1,0,0,0,
		270,282,5,38,0,0,271,272,5,38,0,0,272,273,3,10,5,0,273,274,5,13,0,0,274,
		275,5,42,0,0,275,282,1,0,0,0,276,277,5,38,0,0,277,278,3,8,4,0,278,279,
		5,13,0,0,279,280,5,42,0,0,280,282,1,0,0,0,281,270,1,0,0,0,281,271,1,0,
		0,0,281,276,1,0,0,0,282,47,1,0,0,0,283,284,5,39,0,0,284,49,1,0,0,0,285,
		286,5,40,0,0,286,51,1,0,0,0,20,54,56,61,85,88,93,103,134,151,168,176,184,
		201,217,230,237,243,262,268,281
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
