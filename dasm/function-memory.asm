; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35211.0 

	TITLE	D:\src\toy-computer\dasm\function-memory.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_f1
PUBLIC	_f2
PUBLIC	_f3
PUBLIC	_f4
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG10051 DB	'sizeof(Point) = %d', 0aH, 00H
$SG10052 DB	'%d %d', 0aH, 00H
	ORG $+1
$SG10053 DB	'%d %d', 0aH, 00H
	ORG $+1
$SG10054 DB	'%d %d', 0aH, 00H
	ORG $+1
$SG10055 DB	'%d %d', 0aH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:_main
	DD	010H
	DD	0172H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:_f3
	DD	0dH
	DD	04aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:_f2
	DD	0dH
	DD	045H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:_f1
	DD	0dH
	DD	063H
voltbl	ENDS
; Function compile flags: /Odtp
; File D:\src\toy-computer\dasm\function-memory.c
_TEXT	SEGMENT
$T1 = -168						; size = 20
$T2 = -148						; size = 20
$T3 = -128						; size = 20
_success$ = -108					; size = 4
_pt$ = -104						; size = 20
_ret4$ = -84						; size = 20
_ret3$ = -64						; size = 20
_ret2$ = -44						; size = 20
_ret1$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_main	PROC

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 43   :     printf("sizeof(Point) = %d\n", sizeof(Point));

	push	20					; 00000014H
	push	OFFSET $SG10051
	call	_printf
	add	esp, 8

; 44   :     
; 45   :     Point pt;
; 46   :     pt.x = 100;

	mov	DWORD PTR _pt$[ebp], 100		; 00000064H

; 47   :     pt.y = 200;

	mov	DWORD PTR _pt$[ebp+4], 200		; 000000c8H

; 48   : 
; 49   :     Point ret1 = f1(pt, 1, 2);

	push	2
	push	1
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pt$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pt$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _pt$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	_f1
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret1$[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _ret1$[ebp+16], eax

; 50   :     printf("%d %d\n", ret1.x, ret1.y);

	mov	ecx, DWORD PTR _ret1$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ret1$[ebp]
	push	edx
	push	OFFSET $SG10052
	call	_printf
	add	esp, 12					; 0000000cH

; 51   : 
; 52   :     Point ret2 = f2(pt, 2, 4);

	push	4
	push	2
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pt$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pt$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _pt$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_f2
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret2$[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _ret2$[ebp+16], eax

; 53   :     printf("%d %d\n", ret2.x, ret2.y);

	mov	ecx, DWORD PTR _ret2$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ret2$[ebp]
	push	edx
	push	OFFSET $SG10053
	call	_printf
	add	esp, 12					; 0000000cH

; 54   : 
; 55   :     Point ret3 = f3(&pt, 3, 6);

	push	6
	push	3
	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_f3
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _ret3$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret3$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret3$[ebp+8], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret3$[ebp+12], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _ret3$[ebp+16], edx

; 56   :     printf("%d %d\n", ret3.x, ret3.y);

	mov	eax, DWORD PTR _ret3$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ret3$[ebp]
	push	ecx
	push	OFFSET $SG10054
	call	_printf
	add	esp, 12					; 0000000cH

; 57   : 
; 58   :     Point ret4;
; 59   :     int success = f4(&pt, 4, 8, &ret4);

	lea	edx, DWORD PTR _ret4$[ebp]
	push	edx
	push	8
	push	4
	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	call	_f4
	add	esp, 16					; 00000010H
	mov	DWORD PTR _success$[ebp], eax

; 60   :     printf("%d %d\n", ret4.x, ret4.y);

	mov	ecx, DWORD PTR _ret4$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ret4$[ebp]
	push	edx
	push	OFFSET $SG10055
	call	_printf
	add	esp, 12					; 0000000cH

; 61   : 
; 62   :     return 0;

	xor	eax, eax

; 63   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\src\toy-computer\dasm\function-memory.c
_TEXT	SEGMENT
_pt$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_ret$ = 20						; size = 4
_f4	PROC

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :     ret->x = pt->x + dx;

	mov	eax, DWORD PTR _pt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], ecx

; 37   :     ret->y = pt->y + dy;

	mov	eax, DWORD PTR _pt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _dy$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 38   :     return 1;

	mov	eax, 1

; 39   : }

	pop	ebp
	ret	0
_f4	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\src\toy-computer\dasm\function-memory.c
_TEXT	SEGMENT
_ret$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
__$ReturnAddress$ = 8					; size = 4
_pt$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_f3	PROC

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 28   :     Point ret;
; 29   :     ret.x = pt->x + dx;

	mov	eax, DWORD PTR _pt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ret$[ebp], ecx

; 30   :     ret.y = pt->y + dy;

	mov	edx, DWORD PTR _pt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ret$[ebp+4], eax

; 31   :     return ret;

	mov	ecx, DWORD PTR __$ReturnAddress$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _ret$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR __$ReturnAddress$[ebp]

; 32   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_f3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\src\toy-computer\dasm\function-memory.c
_TEXT	SEGMENT
_ret$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
__$ReturnAddress$ = 8					; size = 4
_pt$ = 12						; size = 20
_dx$ = 32						; size = 4
_dy$ = 36						; size = 4
_f2	PROC

; 19   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20   :     Point ret;
; 21   :     ret.x = pt.x + dx;

	mov	eax, DWORD PTR _pt$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 22   :     ret.y = pt.y + dy;

	mov	ecx, DWORD PTR _pt$[ebp+4]
	add	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ret$[ebp+4], ecx

; 23   :     return ret;

	mov	edx, DWORD PTR __$ReturnAddress$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _ret$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR __$ReturnAddress$[ebp]

; 24   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_f2	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\src\toy-computer\dasm\function-memory.c
_TEXT	SEGMENT
_ret$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
__$ReturnAddress$ = 8					; size = 4
_pt$ = 12						; size = 20
_dx$ = 32						; size = 4
_dy$ = 36						; size = 4
_f1	PROC

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12   :     Point ret = pt;

	mov	eax, DWORD PTR _pt$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
	mov	ecx, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR _ret$[ebp+4], ecx
	mov	edx, DWORD PTR _pt$[ebp+8]
	mov	DWORD PTR _ret$[ebp+8], edx
	mov	eax, DWORD PTR _pt$[ebp+12]
	mov	DWORD PTR _ret$[ebp+12], eax
	mov	ecx, DWORD PTR _pt$[ebp+16]
	mov	DWORD PTR _ret$[ebp+16], ecx

; 13   :     ret.x += dx;

	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 14   :     ret.y += dy;

	mov	eax, DWORD PTR _ret$[ebp+4]
	add	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ret$[ebp+4], eax

; 15   :     return ret;

	mov	ecx, DWORD PTR __$ReturnAddress$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _ret$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR __$ReturnAddress$[ebp]

; 16   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_f1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 963  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

	push	ebp
	mov	ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 646  :     }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
